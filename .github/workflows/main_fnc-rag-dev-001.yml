# Docs for the Azure Web Apps Deploy action: https://github.com/azure/functions-action
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure Functions: https://aka.ms/python-webapps-actions

name: Build and deploy Python project to Azure Function App - fnc-rag-dev-001

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'functions/rag_function' # set this to the path to your web app project, defaults to the repository root
  PYTHON_VERSION: '3.11' # set this to the python version to use (supports 3.6, 3.7, 3.8)

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python version
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: pip install .

      - name: Prepare function package
        run: |
          cp -R langchain_app functions/rag_function/


      # Optional: Add step to run tests here

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip     
        
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_A1FFB7E0501749E69B34EDDA26604127 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_23305474038D4DDCAFF8F2FA751C04F8 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_DDCB59654CF544FB97DEE1E0482EBA05 }}

      - name: 'Deploy to Azure Functions'
        uses: Azure/functions-action@v1
        id: deploy-to-function
        with:
          app-name: 'fnc-rag-dev-001'
          slot-name: 'Production'
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

          
  build_and_push_faiss:
    runs-on: ubuntu-latest
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_A1FFB7E0501749E69B34EDDA26604127 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_23305474038D4DDCAFF8F2FA751C04F8 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_DDCB59654CF544FB97DEE1E0482EBA05 }}

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build FAISS Docker image
        run: |
          docker build \
            -t ${{ secrets.ACR_LOGIN_SERVER }}/faiss:latest \
            ./faiss_container

      - name: Push FAISS image
        run: docker push ${{ secrets.ACR_LOGIN_SERVER }}/faiss:latest

      - name: Deploy/update Azure Container Instance
        run: |
          az container create \
            --resource-group ${{ secrets.AZURE_RG }} \
            --name my-faiss-aci \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/faiss:latest \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --dns-name-label my-faiss-service \
            --ports 8000 \
            --os-type Linux \
            --cpu 1 \
            --memory 1 \
            --restart-policy Always \
            || \
            az container update \
            --resource-group ${{ secrets.AZURE_RG }} \
            --name my-faiss-aci \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/faiss:latest